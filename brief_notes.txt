Important terms

1.  C++ program 
2.  Namespaces
3.  Preprocessor directives 
4.  Protected keywords 
5.  Main()  
        Status codes 
        SIGINT
        void main()
        int main()
        int main(int argc,char* argv[])
6.  Identifiers
7.  Literals
8.  Variables
        Global
        local
        variable shadowing(name hiding)
9.  Constants
        consts 
        constexpr
        volatile
10. Operators
        Precedence list
        Operator overloading
11. Expressions
12. Types
        Fundamental data Types
        object size
        fixed width integers 
13. Type Alias
14. Type Deduction (Datatype)
15. Type Conversions (Datatype)
        Implicit conversions 
            Promotions 
            Numeric conversions
            Arithmetic conversions
        Explicit conversions 
        C   
            Functional type
        C++ 
            Dynamic cast 
            Static cast 
            Reinterpret cast
            Const cast
16. Scope
17. Duration 
18. Linkage
19. Storage class specifiers
        auto
        register
        static 
        extern 
        mutable 
20. Declarations 
21. Definitions 
22. Initializations
        Copy
        Direct
        Uniform / List / Brace 
23. Memory allocation
        new
        delete
24. Operations  
25. Conditionals
        If
        Switch
        break 
        continue  
26. Loops
        For 
        While 
27. Object Oriented Programming (OOP)
    Class - object 
        Abstraction
        Inheritance
        Polymorphism
            Compile time
                Function overloading 
                Operator overloading
            Run time 
                Virtual functions
        Encapsulation
28. Functions
        Forward declarations
        Function definition
            Parameters
            Default arguments
                C++ doesn't specify whether arguments are matched with parameters left to right or right to left 
            Pass by 
                value 
                address
                reference
            Body 
            Return type
                Void
                value 
                reference
                address 
            Return statement
            Inline 
            Friend function 
        Function call
            Arguments
        Function overloading
        Function pointers 
        Lambdas (Lambda functions)
29. Classes 
        Definition
            Class attributes    /   Member variables    /   Fields
            Class behaviour     /   Member functions    /   Methods
            Constructors
                Default Constructors
                Copy Constructors
                        Default copy Constructors
                        Shallow copying 
                        Deep copying  
            Destructor
            Access specifiers 
            Accessor functions  /   Getters
            Mutator functions   /   Setters 

        Object Instantiation 
        The hidden *this pointer 
        Static member functions 
        Virtual functions
        Pure virtual functions 
        Friend class 
        Operator overloading
30. Structs 
31. Templates 
        Function templates 
        Class templates 
        Template initialization
32. Vectors  
33. Pointers
        Raw pointers 
        Void pointers
        Null pointers 
        Smart pointers
            Unique ptr 
            Shared ptr
            Weak ptr

        Function pointers 

        Deleting
        Memory leak
        Dangling pointers  
34. References 
35. Iterators 
36. Functors 
37. I/O 
38. Exceptions 
        Try
        Catch
        Throw 
39. Assert 
40. Logger
41. Refactoring 

--------------------------------------------------------------------------------------
Some Definitions

1.  const int a{10};
2.  const int* b{&a};             // b is a pointer to a const int. value can change
3.  const int* const c{&a};       // c is a const pointer to a const int. address can't change.

4.  int x(int);             // function forward declaration 
    int x(int m){}          // function defintion
    x(m);                   // function call 
    int x(m);               // datatype initialization 
    int x{m};               // datatype initialization 
    int* x(&m);             // pointer initialization
    int (*x)();             // function pointer initialization 
    x = &m;
    (*x)(n);                // function call
    x(n);                   // function call    
    
5.        int x (int m){};          // pass by value 
          int x (int &m){};         // pass by reference 
          int x (int* m){};         // pass by address
          int x (const int& m){};   // const ref 
          int x const(int m){};     // const function 
    const int x (int m){};          // return const int 
    const int* x (int m){};         // return pointer to const int 
    const int x const (int m){};    // const member function 
   